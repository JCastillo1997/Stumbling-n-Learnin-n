{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5f757d81-d79b-4eb6-b495-4b00852210d1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "20dd7c9f-49bf-4541-8e1c-843dd9d569bb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "url_1= 'https://raw.githubusercontent.com/data-bootcamp-v4/data/main/file1.csv'\n",
    "url_2= 'https://raw.githubusercontent.com/data-bootcamp-v4/data/main/file2.csv'\n",
    "url_3= 'https://raw.githubusercontent.com/data-bootcamp-v4/data/main/file3.csv'\n",
    "url_4= 'https://raw.githubusercontent.com/data-bootcamp-v4/data/main/marketing_customer_analysis_clean.csv'\n",
    "df_1= pd.read_csv(url_1)\n",
    "df_2= pd.read_csv(url_2)\n",
    "df_3= pd.read_csv(url_3)\n",
    "df_4= pd.read_csv(url_4)\n",
    "# Para trabajar el dato mejor homogeneizaremos las columnas llamandolas similar y arreglando los valores(como lo de asignar correctamente al valor genero)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d89afca-d8d1-4d06-bc9d-fe1957eb68c2",
   "metadata": {},
   "source": [
    "Challenge 1: Combining and Cleaning Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "80021ecf-639e-48c7-8b73-3faf4b560183",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Customer                     2937\n",
       "ST                           2937\n",
       "GENDER                       3054\n",
       "Education                    2937\n",
       "Customer Lifetime Value      2940\n",
       "Income                       2937\n",
       "Monthly Premium Auto         2937\n",
       "Number of Open Complaints    2937\n",
       "Policy Type                  2937\n",
       "Vehicle Class                2937\n",
       "Total Claim Amount           2937\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fb620a32-4c8f-40e8-b5b6-4988296ab532",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_1.columns = [e.lower().replace(' ', '_') for e in df_1.columns]\n",
    "\n",
    "df_1= df_1.dropna(how='all', axis=0)\n",
    "\n",
    "df_1.rename(columns={'st': 'state'},inplace=True)\n",
    "\n",
    "split_data = df_1.number_of_open_complaints.str.split('/')\n",
    "\n",
    "df_2.number_of_open_complaints = split_data.apply(lambda x: x[1] if type(x)==list else x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "211f2268-0377-48ed-8ea9-3700f8563f70",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_2.columns = [e.lower().replace(' ', '_') for e in df_2.columns]\n",
    "\n",
    "df_2= df_2.dropna(how='all', axis=0)\n",
    "\n",
    "df_2.rename(columns={'st': 'state'},inplace=True)\n",
    "\n",
    "split_data = df_2.number_of_open_complaints.str.split('/')\n",
    "\n",
    "df_2.number_of_open_complaints = split_data.apply(lambda x: x[1] if type(x)==list else x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4dbd4027-f8a3-4688-a155-5d12c4a7962b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Can only use .str accessor with string values!",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[17], line 7\u001b[0m\n\u001b[0;32m      3\u001b[0m df_3\u001b[38;5;241m=\u001b[39m df_3\u001b[38;5;241m.\u001b[39mdropna(how\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m'\u001b[39m, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[0;32m      5\u001b[0m df_3\u001b[38;5;241m.\u001b[39mrename(columns\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mst\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m},inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m----> 7\u001b[0m split_data \u001b[38;5;241m=\u001b[39m df_3\u001b[38;5;241m.\u001b[39mnumber_of_open_complaints\u001b[38;5;241m.\u001b[39mstr\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      9\u001b[0m df_3\u001b[38;5;241m.\u001b[39mnumber_of_open_complaints \u001b[38;5;241m=\u001b[39m split_data\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: x[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(x)\u001b[38;5;241m==\u001b[39m\u001b[38;5;28mlist\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m x)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:5989\u001b[0m, in \u001b[0;36mNDFrame.__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5982\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[0;32m   5983\u001b[0m     name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_internal_names_set\n\u001b[0;32m   5984\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_metadata\n\u001b[0;32m   5985\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessors\n\u001b[0;32m   5986\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_info_axis\u001b[38;5;241m.\u001b[39m_can_hold_identifiers_and_holds_name(name)\n\u001b[0;32m   5987\u001b[0m ):\n\u001b[0;32m   5988\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[name]\n\u001b[1;32m-> 5989\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__getattribute__\u001b[39m(\u001b[38;5;28mself\u001b[39m, name)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\accessor.py:224\u001b[0m, in \u001b[0;36mCachedAccessor.__get__\u001b[1;34m(self, obj, cls)\u001b[0m\n\u001b[0;32m    221\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m obj \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    222\u001b[0m     \u001b[38;5;66;03m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[39;00m\n\u001b[0;32m    223\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessor\n\u001b[1;32m--> 224\u001b[0m accessor_obj \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessor(obj)\n\u001b[0;32m    225\u001b[0m \u001b[38;5;66;03m# Replace the property with the accessor object. Inspired by:\u001b[39;00m\n\u001b[0;32m    226\u001b[0m \u001b[38;5;66;03m# https://www.pydanny.com/cached-property.html\u001b[39;00m\n\u001b[0;32m    227\u001b[0m \u001b[38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on\u001b[39;00m\n\u001b[0;32m    228\u001b[0m \u001b[38;5;66;03m# NDFrame\u001b[39;00m\n\u001b[0;32m    229\u001b[0m \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__setattr__\u001b[39m(obj, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_name, accessor_obj)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py:181\u001b[0m, in \u001b[0;36mStringMethods.__init__\u001b[1;34m(self, data)\u001b[0m\n\u001b[0;32m    178\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, data) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    179\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marrays\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mstring_\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m StringDtype\n\u001b[1;32m--> 181\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_inferred_dtype \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate(data)\n\u001b[0;32m    182\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_categorical \u001b[38;5;241m=\u001b[39m is_categorical_dtype(data\u001b[38;5;241m.\u001b[39mdtype)\n\u001b[0;32m    183\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_string \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(data\u001b[38;5;241m.\u001b[39mdtype, StringDtype)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py:235\u001b[0m, in \u001b[0;36mStringMethods._validate\u001b[1;34m(data)\u001b[0m\n\u001b[0;32m    232\u001b[0m inferred_dtype \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39minfer_dtype(values, skipna\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    234\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inferred_dtype \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m allowed_types:\n\u001b[1;32m--> 235\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCan only use .str accessor with string values!\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    236\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m inferred_dtype\n",
      "\u001b[1;31mAttributeError\u001b[0m: Can only use .str accessor with string values!"
     ]
    }
   ],
   "source": [
    "df_3.columns = [e.lower().replace(' ', '_') for e in df_3.columns]\n",
    "\n",
    "df_3= df_3.dropna(how='all', axis=0)\n",
    "\n",
    "df_3.rename(columns={'st': 'state'},inplace=True)\n",
    "\n",
    "split_data = df_3.number_of_open_complaints.str.split('/')\n",
    "\n",
    "df_3.number_of_open_complaints = split_data.apply(lambda x: x[1] if type(x)==list else x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c4faa9a-a693-4323-b4e5-06eefc7f5b9c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_f= pd.concat([df_1, df_2,df_3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4e0428bd-9178-436e-b8d8-ee0efc896598",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_f' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[22], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m df_f\u001b[38;5;241m.\u001b[39mshape\n",
      "\u001b[1;31mNameError\u001b[0m: name 'df_f' is not defined"
     ]
    }
   ],
   "source": [
    "df_f.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6296ad38-7e20-4f0f-8877-7016db6bc363",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "arreglar_genero={'Femal':'F','Male':'M','female':'F'}\n",
    "fix_state = {'AZ':'Arizona', 'WA':'Washington','Cali':'California'}\n",
    "arreglar_bachelor={'Bachelors':'Bachelor'}\n",
    "arreglar_car={'Sports Car':'Luxury','Luxury SUV':'Luxury', 'Luxury Car':'Luxury'}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3014d984-b633-4bd1-9ca7-db59e49c5a82",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_f= df_f.dropna(how='all', axis=0,)\n",
    "df_f.columns = [e.lower().replace(' ', '_') for e in df_f.columns]\n",
    "df_f.rename(columns={'st': 'state'},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "905e963b-bb62-40f3-be31-d826c065b36c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_f.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1d9a085-8f6e-4479-8757-989f282be608",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_f.gender=df_f.gender.apply(lambda x:arreglar_genero.get(x,x))\n",
    "\n",
    "df_f.state = df_f.state.apply(lambda x: fix_state.get(x,x))\n",
    "\n",
    "df_f.education=df_f.education.apply(lambda x:arreglar_bachelor.get(x,x))\n",
    "    \n",
    "df_f.vehicle_class=df_f.vehicle_class.apply(lambda x:arreglar_car.get(x,x))\n",
    "  \n",
    "df_f.customer_lifetime_value=df_f.customer_lifetime_value.apply(lambda x:x.replace('%','')if type (x)==str else x)\n",
    "  \n",
    "df_f.customer_lifetime_value=df_f.customer_lifetime_value.apply(lambda x: float(x)if type (x)==str else x)\n",
    "    \n",
    "df_f.number_of_open_complaints = split_data.apply(lambda x: x[1] if type(x)==list else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bacb664f-de6d-4136-8674-c64b06047cc3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_f.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41ada55e-032c-4cb5-8763-026be1243bf2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pd.to_numeric(df_f.customer_lifetime_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "398cfd7c-6a54-43c8-a485-0acf8fc0a2aa",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_f.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "360398f0-0743-40e9-ab94-4d8167ba9fbb",
   "metadata": {},
   "source": [
    "# Challenge 2: Structuring Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc2ad3ed-16d9-42c2-8175-e252671ae38c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#  Using pivot, create a summary table showing the total revenue for each sales channel (branch, call center, web, and mail).\n",
    "df_4.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77c99f7b-67b3-4159-9d36-4dc7e5c18da5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_4.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "998445ff-3bc3-4cbf-b366-134a4cfe0641",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_4.pivot(index='customer',columns='sales_channel',values='customer_lifetime_value',aggfunc='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f292adfc-62a5-432e-acd9-a2c42d9321d2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_4.pivot_table(index='sales_channel', columns='customer', values='customer_lifetime_value',aggfunc='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bcba6ab-509e-4715-85a6-a7a106bd1c20",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_4.pivot_table(index='sales_channel', columns='state', values='total_claim_amount').round(2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
